{"version":3,"sources":["components/header.js","components/TaskForm.js","components/Tasks.js","components/TaskControll.js","App.js","reportWebVitals.js","index.js"],"names":["header","className","href","TaskForm","props","useState","input","setInput","onSubmit","e","preventDefault","id","Math","floor","random","text","isComplete","placeholder","required","type","value","name","onChange","target","Tasks","tasks","completeTask","removeTask","statusHandler","filteredTasks","console","log","htmlFor","map","task","index","onClick","TaskList","setTasks","status","setStatus","setFilteredTasks","useEffect","getLocalTasks","filterHandler","saveLocalTasks","filter","localStorage","setItem","JSON","stringify","getItem","localTasks","parse","test","newTasks","updatedTask","newTasksArray","App","TaskControll","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af3f6384.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../assets/css/header.css\";\nfunction header() {\n  return (\n    <div>\n      <header className=\"header container\">\n        <h1 className=\"logo\">\n          <a href=\"#1\">Task management</a>\n        </h1>\n      </header>{\" \"}\n    </div>\n  );\n}\n\nexport default header;\n","import React, { useState } from \"react\";\nimport \"../assets/css/taskForm.css\";\nfunction TaskForm(props) {\n  const [input, setInput] = useState(\"\");\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input,\n      isComplete: false,\n    });\n\n    setInput(\"\");\n  };\n  return (\n    <div className=\"container task-form\">\n      <form className=\"todo-form\" onSubmit={handleSubmit}>\n        <input\n          placeholder=\"Add new task\"\n          required=\"\"\n          type=\"text\"\n          value={input}\n          name=\"text\"\n          onChange={handleChange}\n        />\n        <button>ADD</button>\n      </form>\n    </div>\n  );\n}\n\nexport default TaskForm;\n","import React, { useState } from \"react\";\nimport \"../assets/css/taskItem.css\";\n\nfunction Tasks({\n  tasks,\n  completeTask,\n  removeTask,\n  statusHandler,\n  filteredTasks,\n}) {\n  console.log(filteredTasks);\n  return (\n    <div>\n      <div className=\"taskList\">\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Task Name</th>\n              <th>Status</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td></td>\n              <td></td>\n              <td>\n                <div className=\"sortTask\">\n                  <label className=\"custom-select\" htmlFor=\"styledSelect1\">\n                    <select\n                      onChange={statusHandler}\n                      id=\"styledSelect1\"\n                      name=\"options\"\n                    >\n                      <option value=\"all\">All</option>\n                      <option value=\"uncomplete\">InComplete</option>\n                      <option value=\"done\">Done</option>\n                    </select>\n                  </label>\n                </div>\n              </td>\n              <td></td>\n            </tr>\n            {filteredTasks.map((task, index) => (\n              <tr key={index}>\n                <td\n                  className={`task-item ${task.isComplete ? \"completed\" : \"\"}`}\n                >\n                  {index + 1}\n                </td>\n                <td\n                  className={`task-item ${task.isComplete ? \"completed\" : \"\"}`}\n                >\n                  {task.text}\n                </td>\n                <td>{`${!task.isComplete ? \"InComplete\" : \"Completed\"}`}</td>\n                <td className=\"btnControll\">\n                  <button\n                    className=\"actionBtn Btn_Done\"\n                    onClick={() => completeTask(task.id)}\n                  >\n                    {`${!task.isComplete ? \"Done\" : \"Unfinished\"}`}\n                  </button>\n                  <button\n                    className=\"actionBtn Btn_Del\"\n                    onClick={() => removeTask(task.id)}\n                  >\n                    Delete\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default Tasks;\n","import React, { useEffect, useState } from \"react\";\nimport TaskForm from \"./TaskForm\";\nimport Tasks from \"./Tasks\";\n\nfunction TaskList() {\n  // State stuff\n  const [tasks, setTasks] = useState([]);\n  const [status, setStatus] = useState(\"All\");\n  const [filteredTasks, setFilteredTasks] = useState([]);\n\n  // UseEffect\n  // run once\n  useEffect(() => {\n    getLocalTasks();\n  }, []);\n\n  useEffect(() => {\n    filterHandler();\n    saveLocalTasks();\n  }, [tasks, status]);\n  // Function\n\n  // Filter Tasks\n  const filterHandler = () => {\n    switch (status) {\n      case \"done\":\n        setFilteredTasks(tasks.filter((task) => task.isComplete === true));\n        break;\n\n      case \"uncomplete\":\n        setFilteredTasks(tasks.filter((task) => task.isComplete === false));\n        break;\n\n      default:\n        setFilteredTasks(tasks);\n        break;\n    }\n  };\n  // LocalStorage\n  const saveLocalTasks = () => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  };\n  const getLocalTasks = () => {\n    if (localStorage.getItem(\"tasks\") == null) {\n      localStorage.setItem(\"tasks\", JSON.stringify([]));\n    } else {\n      let localTasks = JSON.parse(localStorage.getItem(\"tasks\"));\n      setTasks(localTasks);\n    }\n  };\n\n  // Add Task\n  const addTask = (task) => {\n    if (!task.text || /^\\d+$/.test(task.text)) {\n      return;\n    }\n\n    const newTasks = [task, ...tasks];\n    setTasks(newTasks);\n    console.log(task, ...tasks);\n  };\n\n  // Done Task\n  const completeTask = (id) => {\n    let updatedTask = tasks.map((task) => {\n      if (task.id === id) {\n        // task.isComplete = !task.isComplete;\n        return {\n          ...task,\n          isComplete: !task.isComplete,\n        };\n      }\n      return task;\n    });\n    setTasks(updatedTask);\n  };\n\n  // Remove Task\n  const removeTask = (id) => {\n    const newTasksArray = [...tasks].filter((task) => task.id !== id);\n    setTasks(newTasksArray);\n  };\n\n  // Search Task\n  const searchTask = (e) => {\n    const value = e.target.value;\n    const tasksAfterSearch = [...tasks].filter((task) => {\n      return task.content.toLowerCase().includes(value);\n    });\n    console.log(value);\n    setTasks(tasksAfterSearch);\n  };\n\n  const statusHandler = (e) => {\n    setStatus(e.target.value);\n  };\n  return (\n    <div className=\"task_list\">\n      <TaskForm onSubmit={addTask} />\n      <div className=\"task-list__form\">\n        <div className=\"controllTask\">\n          {/* <div className=\"searchTask\">\n            <input\n              className=\"search_input\"\n              placeholder=\"Search\"\n              required=\"\"\n              type=\"text\"\n            />\n            <button className=\"btn_search\" type=\"button\">\n              Search\n            </button>\n          </div> */}\n        </div>\n        <Tasks\n          tasks={tasks}\n          completeTask={completeTask}\n          removeTask={removeTask}\n          statusHandler={statusHandler}\n          filteredTasks={filteredTasks}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default TaskList;\n","import React, { useState } from \"react\";\nimport \"./assets/css/App.css\";\nimport \"./assets/css/base.css\";\nimport Header from \"./components/header\";\nimport TaskControll from \"./components/TaskControll\";\n\nconst App = () => (\n  <div className=\"App\">\n    <div className=\"container\">\n      {\" \"}\n      <Header />\n      <TaskControll />\n    </div>\n  </div>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}